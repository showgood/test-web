[
    {
        "uri": "/books/the_art_of_doing_science_and_engineering",
        "title": "The Art of Doing Science and Engineering",
        "content": "\n",
        "tags": []
    },
    {
        "uri": "/books/unix_and_linux_system_administration_handbook",
        "title": "Unix and Linux System Administration Handbook",
        "content": "\ntags\n: book\n\nsource\n:\n",
        "tags": []
    },
    {
        "uri": "/Zettels/book",
        "title": "book",
        "content": "",
        "tags": []
    },
    {
        "uri": "/Zettels/debugger",
        "title": "Debugger",
        "content": "\nwhy debugger can access the virtual memory of a process? Isn't the memory of a\nprocess prviate to the process?\n\n - IMPLEMENTING A DEBUGGER: THE FUNDAMENTALS\n - How debugger works\n",
        "tags": []
    },
    {
        "uri": "/Zettels/exception",
        "title": "exception",
        "content": "",
        "tags": []
    },
    {
        "uri": "/Zettels/gdb",
        "title": "GDB",
        "content": "\ntags\n: Debugger\n\nset function breakpoint {#set-function-breakpoint}\n\nNeed to use fully qualified name, for eg, namespace1::namespace2::func\n\nset breakpoint with filename + line number {#set-breakpoint-with-filename-plus-line-number}\n\nset breakpoint to catch exception {#set-breakpoint-to-catch-exception}\n\ncatch throwing exception\n\ndata breakpoint {#data-breakpoint}\n\nlist breakpoints {#list-breakpoints}\n\ninfo b\n\ndebug core dump {#debug-core-dump}\n\ngdb\n\ndelete breakpoint {#delete-breakpoint}\n\nuse del x where x is number of breakpoint we get from list breakpoints\n\npython interpreter {#python-interpreter}\n\npython\n\nprint command {#print-command}\n\nuse p as shortcut.\n\np/d - display value in decimal\np/t - display value in binary\np/x - display value in hexadecimal\n\narticles {#articles}\n\n - More Redis internals: Tracing a GET & SET\n",
        "tags": []
    },
    {
        "uri": "/Zettels/git_submodule",
        "title": "git submodule",
        "content": "\ntags\n: git\n\ngit submodule add\n\ngit submodule init initialize your local configuration file\nrun it at submodule directory\ngit submodule update fetch all the data from that project\n\ncd cortex/\ngit submodule init\n\nSubmodule 'themes/cortex' (https://github.com/jethrokuan/cortex/) registered for path './'\n",
        "tags": []
    },
    {
        "uri": "/Zettels/git",
        "title": "git",
        "content": "\ngit log {#git-log}\n\nconcise output {#concise-output}\n\n--oneline\n\nlimit number of commits {#limit-number-of-commits}\n\n-n {number of commits}\n\ncheck if a file is under git control {#check-if-a-file-is-under-git-control}\n\ngit ls-files  --error-unmatch\n\nhide untracked file for git status {#hide-untracked-file-for-git-status}\n\ngit status -uno\n\ngit: Your branch and 'origin/master' have diverged {#git-your-branch-and-origin-master-have-diverged}\n\nTonight I hit this error with my emacs config repo.\n\nWhat caused error was this:\n\nI have a feature branch helpful\nI created PR from helpful to master\nI squashed PR on github\nI forgot to sync my working copy with github repo(ie. origin)\nI made some other changes(even though there is no conflict with the changes from helpful branch)\nI committed those changes in my working copy\nI attempted to push those changes to origin, then hit the error\n\nI solved it by following solution&nbsp; :\n\ngit fetch origin\ngit reset --hard origin/master\n\nbut later I realized it's not best way, there should be a better way because I\nactually lost those changes I made in my local working copy.\n\nI think what I should have done is first undo the last commit in my local working copy,\nthen do the steps from&nbsp; which would save my local changes.\n\nhow to undo last commit {#how-to-undo-last-commit}\n\nBest answer I think is from here&nbsp;\n\n> Undoing a commit is a little scary if you don't know how it works. But it's actually amazingly easy if you do understand.\n>\n> Say you have this, where C is your HEAD and (F) is the state of your files.\n>\n>    (F)\n> A-B-C\n>     ↑\n>   master\n> You want to nuke commit C and never see it again. You do this:\n>\n> git reset --hard HEAD~1\n> The result is:\n>\n>  (F)\n> A-B\n>   ↑\n> master\n> Now B is the HEAD. Because you used --hard, your files are reset to their state at commit B.\n>\n> Ah, but suppose commit C wasn't a disaster, but just a bit off. You want to undo the commit but keep your changes for a bit of editing before you do a better commit. Starting again from here, with C as your HEAD:\n>\n>    (F)\n> A-B-C\n>     ↑\n>   master\n> You can do this, leaving off the --hard:\n>\n> git reset HEAD~1\n> In this case the result is:\n>\n>    (F)\n> A-B-C\n>   ↑\n> master\n> In both cases, HEAD is just a pointer to the latest commit. When you do a git reset HEAD~1, you tell Git to move the HEAD pointer back one commit. But (unless you use --hard) you leave your files as they were. So now git status shows the changes you had checked into C. You haven't lost a thing!\n>\n> For the lightest touch, you can even undo your commit but leave your files and your index:\n>\n> git reset --soft HEAD~1\n> This not only leaves your files alone, it even leaves your index alone. When you do git status, you'll see that the same files are in the index as before. In fact, right after this command, you could do git commit and you'd be redoing the same commit you just had.\n>\n> One more thing: Suppose you destroy a commit as in the first example, but then discover you needed it after all? Tough luck, right?\n>\n> Nope, there's still a way to get it back. Type git reflog and you'll see a list of (partial) commit shas that you've moved around in. Find the commit you destroyed, and do this:\n>\n> git checkout -b someNewBranchName shaYouDestroyed\n> You've now resurrected that commit. Commits don't actually get destroyed in Git for some 90 days, so you can usually go back and rescue one you didn't mean to get rid of.\n\n:\n:\n",
        "tags": []
    },
    {
        "uri": "/Zettels/python",
        "title": "Python",
        "content": "",
        "tags": []
    }
]